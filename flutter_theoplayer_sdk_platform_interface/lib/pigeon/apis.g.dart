// Autogenerated from Pigeon (v12.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';
List<Object?> wrapResponse({Object? result, PlatformException? error, bool empty = false}) {
  if (empty) {
    return <Object?>[];
  }
  if (error == null) {
    return <Object?>[result];
  }
  return <Object?>[error.code, error.message, error.details];
}

enum ReadyState {
  have_nothing,
  have_metadata,
  have_current_data,
  have_future_data,
  have_enough_data,
}

enum TextTrackMode {
  disabled,
  hidden,
  showing,
}

enum TextTrackType {
  none,
  srt,
  ttml,
  webvtt,
  emsg,
  eventstream,
  id3,
  cea608,
  daterange,
}

enum TextTrackReadyState {
  none,
  loading,
  loaded,
  error,
}

enum PreloadType {
  none,
  auto,
  metadata,
}

class TimeRange {
  TimeRange({
    required this.start,
    required this.end,
  });

  double start;

  double end;

  Object encode() {
    return <Object?>[
      start,
      end,
    ];
  }

  static TimeRange decode(Object result) {
    result as List<Object?>;
    return TimeRange(
      start: result[0]! as double,
      end: result[1]! as double,
    );
  }
}

class SourceDescription {
  SourceDescription({
    required this.sources,
  });

  List<TypedSource?> sources;

  Object encode() {
    return <Object?>[
      sources,
    ];
  }

  static SourceDescription decode(Object result) {
    result as List<Object?>;
    return SourceDescription(
      sources: (result[0] as List<Object?>?)!.cast<TypedSource?>(),
    );
  }
}

class TypedSource {
  TypedSource({
    required this.src,
    this.drm,
  });

  String src;

  DRMConfiguration? drm;

  Object encode() {
    return <Object?>[
      src,
      drm?.encode(),
    ];
  }

  static TypedSource decode(Object result) {
    result as List<Object?>;
    return TypedSource(
      src: result[0]! as String,
      drm: result[1] != null
          ? DRMConfiguration.decode(result[1]! as List<Object?>)
          : null,
    );
  }
}

class DRMConfiguration {
  DRMConfiguration({
    this.widevine,
    this.fairplay,
    this.customIntegrationId,
    this.integrationParameters,
  });

  WidevineDRMConfiguration? widevine;

  FairPlayDRMConfiguration? fairplay;

  String? customIntegrationId;

  Map<String?, String?>? integrationParameters;

  Object encode() {
    return <Object?>[
      widevine?.encode(),
      fairplay?.encode(),
      customIntegrationId,
      integrationParameters,
    ];
  }

  static DRMConfiguration decode(Object result) {
    result as List<Object?>;
    return DRMConfiguration(
      widevine: result[0] != null
          ? WidevineDRMConfiguration.decode(result[0]! as List<Object?>)
          : null,
      fairplay: result[1] != null
          ? FairPlayDRMConfiguration.decode(result[1]! as List<Object?>)
          : null,
      customIntegrationId: result[2] as String?,
      integrationParameters: (result[3] as Map<Object?, Object?>?)?.cast<String?, String?>(),
    );
  }
}

class WidevineDRMConfiguration {
  WidevineDRMConfiguration({
    required this.licenseAcquisitionURL,
    this.headers,
  });

  String licenseAcquisitionURL;

  Map<String?, String?>? headers;

  Object encode() {
    return <Object?>[
      licenseAcquisitionURL,
      headers,
    ];
  }

  static WidevineDRMConfiguration decode(Object result) {
    result as List<Object?>;
    return WidevineDRMConfiguration(
      licenseAcquisitionURL: result[0]! as String,
      headers: (result[1] as Map<Object?, Object?>?)?.cast<String?, String?>(),
    );
  }
}

class FairPlayDRMConfiguration {
  FairPlayDRMConfiguration({
    required this.licenseAcquisitionURL,
    required this.certificateURL,
    this.headers,
  });

  String licenseAcquisitionURL;

  String certificateURL;

  Map<String?, String?>? headers;

  Object encode() {
    return <Object?>[
      licenseAcquisitionURL,
      certificateURL,
      headers,
    ];
  }

  static FairPlayDRMConfiguration decode(Object result) {
    result as List<Object?>;
    return FairPlayDRMConfiguration(
      licenseAcquisitionURL: result[0]! as String,
      certificateURL: result[1]! as String,
      headers: (result[2] as Map<Object?, Object?>?)?.cast<String?, String?>(),
    );
  }
}

class THEOplayerNativeTextTracksAPI {
  /// Constructor for [THEOplayerNativeTextTracksAPI].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  THEOplayerNativeTextTracksAPI({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = StandardMessageCodec();

  Future<void> setMode(int arg_textTrackUid, TextTrackMode arg_mode) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerNativeTextTracksAPI.setMode', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_textTrackUid, arg_mode.index]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }
}

abstract class THEOplayerFlutterTextTracksAPI {
  static const MessageCodec<Object?> codec = StandardMessageCodec();

  void onAddTextTrack(String? id, int uid, String? label, String? language, String? kind, String? inBandMetadataTrackDispatchType, TextTrackReadyState readyState, TextTrackType type, String? source, bool isForced, TextTrackMode mode);

  void onRemoveTextTrack(int uid);

  void onTextTrackListChange(int uid);

  void onTextTrackAddCue(int textTrackUid, String id, int uid, double startTime, double endTime, String content);

  void onTextTrackRemoveCue(int textTrackUid, int cueUid);

  void onTextTrackEnterCue(int textTrackUid, int cueUid);

  void onTextTrackExitCue(int textTrackUid, int cueUid);

  void onTextTrackCueChange(int textTrackUid);

  void onTextTrackChange(int textTrackUid);

  void onCueEnter(int textTrackUid, int cueUid);

  void onCueExit(int textTrackUid, int cueUid);

  void onCueUpdate(int textTrackUid, int cueUid, double endTime, String content);

  static void setup(THEOplayerFlutterTextTracksAPI? api, {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterTextTracksAPI.onAddTextTrack', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterTextTracksAPI.onAddTextTrack was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_id = (args[0] as String?);
          final int? arg_uid = (args[1] as int?);
          assert(arg_uid != null,
              'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterTextTracksAPI.onAddTextTrack was null, expected non-null int.');
          final String? arg_label = (args[2] as String?);
          final String? arg_language = (args[3] as String?);
          final String? arg_kind = (args[4] as String?);
          final String? arg_inBandMetadataTrackDispatchType = (args[5] as String?);
          final TextTrackReadyState? arg_readyState = args[6] == null ? null : TextTrackReadyState.values[args[6]! as int];
          assert(arg_readyState != null,
              'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterTextTracksAPI.onAddTextTrack was null, expected non-null TextTrackReadyState.');
          final TextTrackType? arg_type = args[7] == null ? null : TextTrackType.values[args[7]! as int];
          assert(arg_type != null,
              'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterTextTracksAPI.onAddTextTrack was null, expected non-null TextTrackType.');
          final String? arg_source = (args[8] as String?);
          final bool? arg_isForced = (args[9] as bool?);
          assert(arg_isForced != null,
              'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterTextTracksAPI.onAddTextTrack was null, expected non-null bool.');
          final TextTrackMode? arg_mode = args[10] == null ? null : TextTrackMode.values[args[10]! as int];
          assert(arg_mode != null,
              'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterTextTracksAPI.onAddTextTrack was null, expected non-null TextTrackMode.');
          try {
            api.onAddTextTrack(arg_id, arg_uid!, arg_label, arg_language, arg_kind, arg_inBandMetadataTrackDispatchType, arg_readyState!, arg_type!, arg_source, arg_isForced!, arg_mode!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterTextTracksAPI.onRemoveTextTrack', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterTextTracksAPI.onRemoveTextTrack was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_uid = (args[0] as int?);
          assert(arg_uid != null,
              'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterTextTracksAPI.onRemoveTextTrack was null, expected non-null int.');
          try {
            api.onRemoveTextTrack(arg_uid!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterTextTracksAPI.onTextTrackListChange', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterTextTracksAPI.onTextTrackListChange was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_uid = (args[0] as int?);
          assert(arg_uid != null,
              'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterTextTracksAPI.onTextTrackListChange was null, expected non-null int.');
          try {
            api.onTextTrackListChange(arg_uid!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterTextTracksAPI.onTextTrackAddCue', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterTextTracksAPI.onTextTrackAddCue was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_textTrackUid = (args[0] as int?);
          assert(arg_textTrackUid != null,
              'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterTextTracksAPI.onTextTrackAddCue was null, expected non-null int.');
          final String? arg_id = (args[1] as String?);
          assert(arg_id != null,
              'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterTextTracksAPI.onTextTrackAddCue was null, expected non-null String.');
          final int? arg_uid = (args[2] as int?);
          assert(arg_uid != null,
              'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterTextTracksAPI.onTextTrackAddCue was null, expected non-null int.');
          final double? arg_startTime = (args[3] as double?);
          assert(arg_startTime != null,
              'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterTextTracksAPI.onTextTrackAddCue was null, expected non-null double.');
          final double? arg_endTime = (args[4] as double?);
          assert(arg_endTime != null,
              'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterTextTracksAPI.onTextTrackAddCue was null, expected non-null double.');
          final String? arg_content = (args[5] as String?);
          assert(arg_content != null,
              'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterTextTracksAPI.onTextTrackAddCue was null, expected non-null String.');
          try {
            api.onTextTrackAddCue(arg_textTrackUid!, arg_id!, arg_uid!, arg_startTime!, arg_endTime!, arg_content!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterTextTracksAPI.onTextTrackRemoveCue', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterTextTracksAPI.onTextTrackRemoveCue was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_textTrackUid = (args[0] as int?);
          assert(arg_textTrackUid != null,
              'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterTextTracksAPI.onTextTrackRemoveCue was null, expected non-null int.');
          final int? arg_cueUid = (args[1] as int?);
          assert(arg_cueUid != null,
              'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterTextTracksAPI.onTextTrackRemoveCue was null, expected non-null int.');
          try {
            api.onTextTrackRemoveCue(arg_textTrackUid!, arg_cueUid!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterTextTracksAPI.onTextTrackEnterCue', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterTextTracksAPI.onTextTrackEnterCue was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_textTrackUid = (args[0] as int?);
          assert(arg_textTrackUid != null,
              'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterTextTracksAPI.onTextTrackEnterCue was null, expected non-null int.');
          final int? arg_cueUid = (args[1] as int?);
          assert(arg_cueUid != null,
              'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterTextTracksAPI.onTextTrackEnterCue was null, expected non-null int.');
          try {
            api.onTextTrackEnterCue(arg_textTrackUid!, arg_cueUid!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterTextTracksAPI.onTextTrackExitCue', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterTextTracksAPI.onTextTrackExitCue was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_textTrackUid = (args[0] as int?);
          assert(arg_textTrackUid != null,
              'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterTextTracksAPI.onTextTrackExitCue was null, expected non-null int.');
          final int? arg_cueUid = (args[1] as int?);
          assert(arg_cueUid != null,
              'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterTextTracksAPI.onTextTrackExitCue was null, expected non-null int.');
          try {
            api.onTextTrackExitCue(arg_textTrackUid!, arg_cueUid!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterTextTracksAPI.onTextTrackCueChange', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterTextTracksAPI.onTextTrackCueChange was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_textTrackUid = (args[0] as int?);
          assert(arg_textTrackUid != null,
              'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterTextTracksAPI.onTextTrackCueChange was null, expected non-null int.');
          try {
            api.onTextTrackCueChange(arg_textTrackUid!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterTextTracksAPI.onTextTrackChange', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterTextTracksAPI.onTextTrackChange was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_textTrackUid = (args[0] as int?);
          assert(arg_textTrackUid != null,
              'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterTextTracksAPI.onTextTrackChange was null, expected non-null int.');
          try {
            api.onTextTrackChange(arg_textTrackUid!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterTextTracksAPI.onCueEnter', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterTextTracksAPI.onCueEnter was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_textTrackUid = (args[0] as int?);
          assert(arg_textTrackUid != null,
              'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterTextTracksAPI.onCueEnter was null, expected non-null int.');
          final int? arg_cueUid = (args[1] as int?);
          assert(arg_cueUid != null,
              'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterTextTracksAPI.onCueEnter was null, expected non-null int.');
          try {
            api.onCueEnter(arg_textTrackUid!, arg_cueUid!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterTextTracksAPI.onCueExit', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterTextTracksAPI.onCueExit was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_textTrackUid = (args[0] as int?);
          assert(arg_textTrackUid != null,
              'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterTextTracksAPI.onCueExit was null, expected non-null int.');
          final int? arg_cueUid = (args[1] as int?);
          assert(arg_cueUid != null,
              'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterTextTracksAPI.onCueExit was null, expected non-null int.');
          try {
            api.onCueExit(arg_textTrackUid!, arg_cueUid!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterTextTracksAPI.onCueUpdate', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterTextTracksAPI.onCueUpdate was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_textTrackUid = (args[0] as int?);
          assert(arg_textTrackUid != null,
              'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterTextTracksAPI.onCueUpdate was null, expected non-null int.');
          final int? arg_cueUid = (args[1] as int?);
          assert(arg_cueUid != null,
              'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterTextTracksAPI.onCueUpdate was null, expected non-null int.');
          final double? arg_endTime = (args[2] as double?);
          assert(arg_endTime != null,
              'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterTextTracksAPI.onCueUpdate was null, expected non-null double.');
          final String? arg_content = (args[3] as String?);
          assert(arg_content != null,
              'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterTextTracksAPI.onCueUpdate was null, expected non-null String.');
          try {
            api.onCueUpdate(arg_textTrackUid!, arg_cueUid!, arg_endTime!, arg_content!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }
}

class _THEOplayerNativeAPICodec extends StandardMessageCodec {
  const _THEOplayerNativeAPICodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is DRMConfiguration) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is FairPlayDRMConfiguration) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is SourceDescription) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is TimeRange) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else if (value is TypedSource) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else if (value is WidevineDRMConfiguration) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return DRMConfiguration.decode(readValue(buffer)!);
      case 129: 
        return FairPlayDRMConfiguration.decode(readValue(buffer)!);
      case 130: 
        return SourceDescription.decode(readValue(buffer)!);
      case 131: 
        return TimeRange.decode(readValue(buffer)!);
      case 132: 
        return TypedSource.decode(readValue(buffer)!);
      case 133: 
        return WidevineDRMConfiguration.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class THEOplayerNativeAPI {
  /// Constructor for [THEOplayerNativeAPI].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  THEOplayerNativeAPI({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _THEOplayerNativeAPICodec();

  Future<void> setSource(SourceDescription? arg_source) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerNativeAPI.setSource', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_source]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<SourceDescription?> getSource() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerNativeAPI.getSource', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return (replyList[0] as SourceDescription?);
    }
  }

  Future<void> setAutoplay(bool arg_autoplay) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerNativeAPI.setAutoplay', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_autoplay]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<bool> isAutoplay() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerNativeAPI.isAutoplay', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as bool?)!;
    }
  }

  Future<void> play() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerNativeAPI.play', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> pause() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerNativeAPI.pause', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<bool> isPaused() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerNativeAPI.isPaused', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as bool?)!;
    }
  }

  Future<void> setCurrentTime(double arg_currentTime) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerNativeAPI.setCurrentTime', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_currentTime]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<double> getCurrentTime() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerNativeAPI.getCurrentTime', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as double?)!;
    }
  }

  Future<void> setCurrentProgramDateTime(int arg_currentProgramDateTime) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerNativeAPI.setCurrentProgramDateTime', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_currentProgramDateTime]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<int?> getCurrentProgramDateTime() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerNativeAPI.getCurrentProgramDateTime', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return (replyList[0] as int?);
    }
  }

  Future<double> getDuration() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerNativeAPI.getDuration', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as double?)!;
    }
  }

  Future<void> setPlaybackRate(double arg_playbackRate) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerNativeAPI.setPlaybackRate', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_playbackRate]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<double> getPlaybackRate() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerNativeAPI.getPlaybackRate', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as double?)!;
    }
  }

  Future<void> setVolume(double arg_volume) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerNativeAPI.setVolume', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_volume]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<double> getVolume() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerNativeAPI.getVolume', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as double?)!;
    }
  }

  Future<void> setMuted(bool arg_muted) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerNativeAPI.setMuted', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_muted]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<bool> isMuted() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerNativeAPI.isMuted', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as bool?)!;
    }
  }

  Future<void> setPreload(PreloadType arg_preload) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerNativeAPI.setPreload', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_preload.index]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<PreloadType> getPreload() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerNativeAPI.getPreload', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return PreloadType.values[replyList[0]! as int];
    }
  }

  Future<ReadyState> getReadyState() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerNativeAPI.getReadyState', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return ReadyState.values[replyList[0]! as int];
    }
  }

  Future<bool> isSeeking() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerNativeAPI.isSeeking', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as bool?)!;
    }
  }

  Future<bool> isEnded() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerNativeAPI.isEnded', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as bool?)!;
    }
  }

  Future<int> getVideoWidth() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerNativeAPI.getVideoWidth', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as int?)!;
    }
  }

  Future<int> getVideoHeight() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerNativeAPI.getVideoHeight', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as int?)!;
    }
  }

  Future<List<TimeRange?>> getBuffered() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerNativeAPI.getBuffered', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as List<Object?>?)!.cast<TimeRange?>();
    }
  }

  Future<List<TimeRange?>> getSeekable() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerNativeAPI.getSeekable', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as List<Object?>?)!.cast<TimeRange?>();
    }
  }

  Future<List<TimeRange?>> getPlayed() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerNativeAPI.getPlayed', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as List<Object?>?)!.cast<TimeRange?>();
    }
  }

  Future<void> setAllowBackgroundPlayback(bool arg_allowBackgroundPlayback) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerNativeAPI.setAllowBackgroundPlayback', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_allowBackgroundPlayback]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<bool> allowBackgroundPlayback() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerNativeAPI.allowBackgroundPlayback', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as bool?)!;
    }
  }

  Future<String?> getError() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerNativeAPI.getError', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return (replyList[0] as String?);
    }
  }

  Future<void> stop() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerNativeAPI.stop', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> dispose() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerNativeAPI.dispose', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> onLifecycleResume() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerNativeAPI.onLifecycleResume', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> onLifecyclePause() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerNativeAPI.onLifecyclePause', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }
}

class _THEOplayerFlutterAPICodec extends StandardMessageCodec {
  const _THEOplayerFlutterAPICodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is DRMConfiguration) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is FairPlayDRMConfiguration) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is SourceDescription) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is TypedSource) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else if (value is WidevineDRMConfiguration) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return DRMConfiguration.decode(readValue(buffer)!);
      case 129: 
        return FairPlayDRMConfiguration.decode(readValue(buffer)!);
      case 130: 
        return SourceDescription.decode(readValue(buffer)!);
      case 131: 
        return TypedSource.decode(readValue(buffer)!);
      case 132: 
        return WidevineDRMConfiguration.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

abstract class THEOplayerFlutterAPI {
  static const MessageCodec<Object?> codec = _THEOplayerFlutterAPICodec();

  void onSourceChange(SourceDescription? source);

  void onPlay(double currentTime);

  void onPlaying(double currentTime);

  void onPause(double currentTime);

  void onWaiting(double currentTime);

  void onDurationChange(double duration);

  void onProgress(double currentTime);

  void onTimeUpdate(double currentTime, int? currentProgramDateTime);

  void onRateChange(double currentTime, double playbackRate);

  void onSeeking(double currentTime);

  void onSeeked(double currentTime);

  void onVolumeChange(double currentTime, double volume);

  void onResize(double currentTime, int width, int height);

  void onEnded(double currentTime);

  void onError(String error);

  void onDestroy();

  void onReadyStateChange(double currentTime, ReadyState readyState);

  void onLoadStart();

  void onLoadedMetadata(double currentTime);

  void onLoadedData(double currentTime);

  void onCanPlay(double currentTime);

  void onCanPlayThrough(double currentTime);

  static void setup(THEOplayerFlutterAPI? api, {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterAPI.onSourceChange', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterAPI.onSourceChange was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final SourceDescription? arg_source = (args[0] as SourceDescription?);
          try {
            api.onSourceChange(arg_source);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterAPI.onPlay', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterAPI.onPlay was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final double? arg_currentTime = (args[0] as double?);
          assert(arg_currentTime != null,
              'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterAPI.onPlay was null, expected non-null double.');
          try {
            api.onPlay(arg_currentTime!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterAPI.onPlaying', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterAPI.onPlaying was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final double? arg_currentTime = (args[0] as double?);
          assert(arg_currentTime != null,
              'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterAPI.onPlaying was null, expected non-null double.');
          try {
            api.onPlaying(arg_currentTime!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterAPI.onPause', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterAPI.onPause was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final double? arg_currentTime = (args[0] as double?);
          assert(arg_currentTime != null,
              'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterAPI.onPause was null, expected non-null double.');
          try {
            api.onPause(arg_currentTime!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterAPI.onWaiting', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterAPI.onWaiting was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final double? arg_currentTime = (args[0] as double?);
          assert(arg_currentTime != null,
              'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterAPI.onWaiting was null, expected non-null double.');
          try {
            api.onWaiting(arg_currentTime!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterAPI.onDurationChange', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterAPI.onDurationChange was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final double? arg_duration = (args[0] as double?);
          assert(arg_duration != null,
              'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterAPI.onDurationChange was null, expected non-null double.');
          try {
            api.onDurationChange(arg_duration!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterAPI.onProgress', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterAPI.onProgress was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final double? arg_currentTime = (args[0] as double?);
          assert(arg_currentTime != null,
              'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterAPI.onProgress was null, expected non-null double.');
          try {
            api.onProgress(arg_currentTime!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterAPI.onTimeUpdate', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterAPI.onTimeUpdate was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final double? arg_currentTime = (args[0] as double?);
          assert(arg_currentTime != null,
              'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterAPI.onTimeUpdate was null, expected non-null double.');
          final int? arg_currentProgramDateTime = (args[1] as int?);
          try {
            api.onTimeUpdate(arg_currentTime!, arg_currentProgramDateTime);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterAPI.onRateChange', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterAPI.onRateChange was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final double? arg_currentTime = (args[0] as double?);
          assert(arg_currentTime != null,
              'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterAPI.onRateChange was null, expected non-null double.');
          final double? arg_playbackRate = (args[1] as double?);
          assert(arg_playbackRate != null,
              'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterAPI.onRateChange was null, expected non-null double.');
          try {
            api.onRateChange(arg_currentTime!, arg_playbackRate!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterAPI.onSeeking', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterAPI.onSeeking was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final double? arg_currentTime = (args[0] as double?);
          assert(arg_currentTime != null,
              'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterAPI.onSeeking was null, expected non-null double.');
          try {
            api.onSeeking(arg_currentTime!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterAPI.onSeeked', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterAPI.onSeeked was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final double? arg_currentTime = (args[0] as double?);
          assert(arg_currentTime != null,
              'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterAPI.onSeeked was null, expected non-null double.');
          try {
            api.onSeeked(arg_currentTime!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterAPI.onVolumeChange', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterAPI.onVolumeChange was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final double? arg_currentTime = (args[0] as double?);
          assert(arg_currentTime != null,
              'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterAPI.onVolumeChange was null, expected non-null double.');
          final double? arg_volume = (args[1] as double?);
          assert(arg_volume != null,
              'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterAPI.onVolumeChange was null, expected non-null double.');
          try {
            api.onVolumeChange(arg_currentTime!, arg_volume!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterAPI.onResize', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterAPI.onResize was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final double? arg_currentTime = (args[0] as double?);
          assert(arg_currentTime != null,
              'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterAPI.onResize was null, expected non-null double.');
          final int? arg_width = (args[1] as int?);
          assert(arg_width != null,
              'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterAPI.onResize was null, expected non-null int.');
          final int? arg_height = (args[2] as int?);
          assert(arg_height != null,
              'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterAPI.onResize was null, expected non-null int.');
          try {
            api.onResize(arg_currentTime!, arg_width!, arg_height!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterAPI.onEnded', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterAPI.onEnded was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final double? arg_currentTime = (args[0] as double?);
          assert(arg_currentTime != null,
              'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterAPI.onEnded was null, expected non-null double.');
          try {
            api.onEnded(arg_currentTime!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterAPI.onError', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterAPI.onError was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_error = (args[0] as String?);
          assert(arg_error != null,
              'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterAPI.onError was null, expected non-null String.');
          try {
            api.onError(arg_error!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterAPI.onDestroy', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          try {
            api.onDestroy();
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterAPI.onReadyStateChange', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterAPI.onReadyStateChange was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final double? arg_currentTime = (args[0] as double?);
          assert(arg_currentTime != null,
              'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterAPI.onReadyStateChange was null, expected non-null double.');
          final ReadyState? arg_readyState = args[1] == null ? null : ReadyState.values[args[1]! as int];
          assert(arg_readyState != null,
              'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterAPI.onReadyStateChange was null, expected non-null ReadyState.');
          try {
            api.onReadyStateChange(arg_currentTime!, arg_readyState!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterAPI.onLoadStart', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          try {
            api.onLoadStart();
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterAPI.onLoadedMetadata', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterAPI.onLoadedMetadata was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final double? arg_currentTime = (args[0] as double?);
          assert(arg_currentTime != null,
              'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterAPI.onLoadedMetadata was null, expected non-null double.');
          try {
            api.onLoadedMetadata(arg_currentTime!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterAPI.onLoadedData', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterAPI.onLoadedData was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final double? arg_currentTime = (args[0] as double?);
          assert(arg_currentTime != null,
              'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterAPI.onLoadedData was null, expected non-null double.');
          try {
            api.onLoadedData(arg_currentTime!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterAPI.onCanPlay', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterAPI.onCanPlay was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final double? arg_currentTime = (args[0] as double?);
          assert(arg_currentTime != null,
              'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterAPI.onCanPlay was null, expected non-null double.');
          try {
            api.onCanPlay(arg_currentTime!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterAPI.onCanPlayThrough', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterAPI.onCanPlayThrough was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final double? arg_currentTime = (args[0] as double?);
          assert(arg_currentTime != null,
              'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterAPI.onCanPlayThrough was null, expected non-null double.');
          try {
            api.onCanPlayThrough(arg_currentTime!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }
}

class THEOplayerNativeVideoTracksAPI {
  /// Constructor for [THEOplayerNativeVideoTracksAPI].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  THEOplayerNativeVideoTracksAPI({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = StandardMessageCodec();

  Future<void> setTargetQuality(int arg_videoTrackUid, int? arg_qualityUid) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerNativeVideoTracksAPI.setTargetQuality', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_videoTrackUid, arg_qualityUid]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setTargetQualities(int arg_videoTrackUid, List<int?>? arg_qualitiesUid) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerNativeVideoTracksAPI.setTargetQualities', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_videoTrackUid, arg_qualitiesUid]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setEnabled(int arg_videoTrackUid, bool arg_enabled) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerNativeVideoTracksAPI.setEnabled', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_videoTrackUid, arg_enabled]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }
}

abstract class THEOplayerFlutterVideoTracksAPI {
  static const MessageCodec<Object?> codec = StandardMessageCodec();

  void onAddVideoTrack(String? id, int uid, String? label, String? language, String? kind, bool isEnabled);

  void onVideoTrackAddQuality(int videoTrackUid, String qualityId, int qualityUid, String? name, int bandwidth, String? codecs, int width, int height, double frameRate, double firstFrame);

  void onRemoveVideoTrack(int uid);

  void onVideoTrackListChange(int uid);

  void onTargetQualityChange(int videoTrackUid, List<int?> qualitiesUid, int? qualityUid);

  void onActiveQualityChange(int videoTrackUid, int qualityUid);

  void onQualityUpdate(int videoTrackUid, int qualityUid, String? name, int bandwidth, String? codecs, int width, int height, double frameRate, double firstFrame);

  static void setup(THEOplayerFlutterVideoTracksAPI? api, {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterVideoTracksAPI.onAddVideoTrack', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterVideoTracksAPI.onAddVideoTrack was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_id = (args[0] as String?);
          final int? arg_uid = (args[1] as int?);
          assert(arg_uid != null,
              'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterVideoTracksAPI.onAddVideoTrack was null, expected non-null int.');
          final String? arg_label = (args[2] as String?);
          final String? arg_language = (args[3] as String?);
          final String? arg_kind = (args[4] as String?);
          final bool? arg_isEnabled = (args[5] as bool?);
          assert(arg_isEnabled != null,
              'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterVideoTracksAPI.onAddVideoTrack was null, expected non-null bool.');
          try {
            api.onAddVideoTrack(arg_id, arg_uid!, arg_label, arg_language, arg_kind, arg_isEnabled!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterVideoTracksAPI.onVideoTrackAddQuality', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterVideoTracksAPI.onVideoTrackAddQuality was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_videoTrackUid = (args[0] as int?);
          assert(arg_videoTrackUid != null,
              'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterVideoTracksAPI.onVideoTrackAddQuality was null, expected non-null int.');
          final String? arg_qualityId = (args[1] as String?);
          assert(arg_qualityId != null,
              'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterVideoTracksAPI.onVideoTrackAddQuality was null, expected non-null String.');
          final int? arg_qualityUid = (args[2] as int?);
          assert(arg_qualityUid != null,
              'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterVideoTracksAPI.onVideoTrackAddQuality was null, expected non-null int.');
          final String? arg_name = (args[3] as String?);
          final int? arg_bandwidth = (args[4] as int?);
          assert(arg_bandwidth != null,
              'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterVideoTracksAPI.onVideoTrackAddQuality was null, expected non-null int.');
          final String? arg_codecs = (args[5] as String?);
          final int? arg_width = (args[6] as int?);
          assert(arg_width != null,
              'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterVideoTracksAPI.onVideoTrackAddQuality was null, expected non-null int.');
          final int? arg_height = (args[7] as int?);
          assert(arg_height != null,
              'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterVideoTracksAPI.onVideoTrackAddQuality was null, expected non-null int.');
          final double? arg_frameRate = (args[8] as double?);
          assert(arg_frameRate != null,
              'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterVideoTracksAPI.onVideoTrackAddQuality was null, expected non-null double.');
          final double? arg_firstFrame = (args[9] as double?);
          assert(arg_firstFrame != null,
              'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterVideoTracksAPI.onVideoTrackAddQuality was null, expected non-null double.');
          try {
            api.onVideoTrackAddQuality(arg_videoTrackUid!, arg_qualityId!, arg_qualityUid!, arg_name, arg_bandwidth!, arg_codecs, arg_width!, arg_height!, arg_frameRate!, arg_firstFrame!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterVideoTracksAPI.onRemoveVideoTrack', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterVideoTracksAPI.onRemoveVideoTrack was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_uid = (args[0] as int?);
          assert(arg_uid != null,
              'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterVideoTracksAPI.onRemoveVideoTrack was null, expected non-null int.');
          try {
            api.onRemoveVideoTrack(arg_uid!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterVideoTracksAPI.onVideoTrackListChange', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterVideoTracksAPI.onVideoTrackListChange was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_uid = (args[0] as int?);
          assert(arg_uid != null,
              'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterVideoTracksAPI.onVideoTrackListChange was null, expected non-null int.');
          try {
            api.onVideoTrackListChange(arg_uid!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterVideoTracksAPI.onTargetQualityChange', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterVideoTracksAPI.onTargetQualityChange was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_videoTrackUid = (args[0] as int?);
          assert(arg_videoTrackUid != null,
              'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterVideoTracksAPI.onTargetQualityChange was null, expected non-null int.');
          final List<int?>? arg_qualitiesUid = (args[1] as List<Object?>?)?.cast<int?>();
          assert(arg_qualitiesUid != null,
              'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterVideoTracksAPI.onTargetQualityChange was null, expected non-null List<int?>.');
          final int? arg_qualityUid = (args[2] as int?);
          try {
            api.onTargetQualityChange(arg_videoTrackUid!, arg_qualitiesUid!, arg_qualityUid);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterVideoTracksAPI.onActiveQualityChange', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterVideoTracksAPI.onActiveQualityChange was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_videoTrackUid = (args[0] as int?);
          assert(arg_videoTrackUid != null,
              'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterVideoTracksAPI.onActiveQualityChange was null, expected non-null int.');
          final int? arg_qualityUid = (args[1] as int?);
          assert(arg_qualityUid != null,
              'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterVideoTracksAPI.onActiveQualityChange was null, expected non-null int.');
          try {
            api.onActiveQualityChange(arg_videoTrackUid!, arg_qualityUid!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterVideoTracksAPI.onQualityUpdate', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterVideoTracksAPI.onQualityUpdate was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_videoTrackUid = (args[0] as int?);
          assert(arg_videoTrackUid != null,
              'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterVideoTracksAPI.onQualityUpdate was null, expected non-null int.');
          final int? arg_qualityUid = (args[1] as int?);
          assert(arg_qualityUid != null,
              'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterVideoTracksAPI.onQualityUpdate was null, expected non-null int.');
          final String? arg_name = (args[2] as String?);
          final int? arg_bandwidth = (args[3] as int?);
          assert(arg_bandwidth != null,
              'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterVideoTracksAPI.onQualityUpdate was null, expected non-null int.');
          final String? arg_codecs = (args[4] as String?);
          final int? arg_width = (args[5] as int?);
          assert(arg_width != null,
              'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterVideoTracksAPI.onQualityUpdate was null, expected non-null int.');
          final int? arg_height = (args[6] as int?);
          assert(arg_height != null,
              'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterVideoTracksAPI.onQualityUpdate was null, expected non-null int.');
          final double? arg_frameRate = (args[7] as double?);
          assert(arg_frameRate != null,
              'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterVideoTracksAPI.onQualityUpdate was null, expected non-null double.');
          final double? arg_firstFrame = (args[8] as double?);
          assert(arg_firstFrame != null,
              'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterVideoTracksAPI.onQualityUpdate was null, expected non-null double.');
          try {
            api.onQualityUpdate(arg_videoTrackUid!, arg_qualityUid!, arg_name, arg_bandwidth!, arg_codecs, arg_width!, arg_height!, arg_frameRate!, arg_firstFrame!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }
}

class THEOplayerNativeAudioTracksAPI {
  /// Constructor for [THEOplayerNativeAudioTracksAPI].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  THEOplayerNativeAudioTracksAPI({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = StandardMessageCodec();

  Future<void> setTargetQuality(int arg_audioTrackUid, int? arg_qualityUid) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerNativeAudioTracksAPI.setTargetQuality', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_audioTrackUid, arg_qualityUid]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setTargetQualities(int arg_audioTrackUid, List<int?>? arg_qualitiesUid) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerNativeAudioTracksAPI.setTargetQualities', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_audioTrackUid, arg_qualitiesUid]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setEnabled(int arg_audioTrackUid, bool arg_enabled) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerNativeAudioTracksAPI.setEnabled', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_audioTrackUid, arg_enabled]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }
}

abstract class THEOplayerFlutterAudioTracksAPI {
  static const MessageCodec<Object?> codec = StandardMessageCodec();

  void onAddAudioTrack(String? id, int uid, String? label, String? language, String? kind, bool isEnabled);

  void onAudioTrackAddQuality(int audioTrackUid, String qualityId, int qualityUid, String? name, int bandwidth, String? codecs, int audioSamplingRate);

  void onRemoveAudioTrack(int uid);

  void onAudioTrackListChange(int uid);

  void onTargetQualityChange(int audioTrackUid, List<int?> qualitiesUid, int? qualityUid);

  void onActiveQualityChange(int audioTrackUid, int qualityUid);

  void onQualityUpdate(int audioTrackUid, int qualityUid, String? name, int bandwidth, String? codecs, int audioSamplingRate);

  static void setup(THEOplayerFlutterAudioTracksAPI? api, {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterAudioTracksAPI.onAddAudioTrack', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterAudioTracksAPI.onAddAudioTrack was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_id = (args[0] as String?);
          final int? arg_uid = (args[1] as int?);
          assert(arg_uid != null,
              'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterAudioTracksAPI.onAddAudioTrack was null, expected non-null int.');
          final String? arg_label = (args[2] as String?);
          final String? arg_language = (args[3] as String?);
          final String? arg_kind = (args[4] as String?);
          final bool? arg_isEnabled = (args[5] as bool?);
          assert(arg_isEnabled != null,
              'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterAudioTracksAPI.onAddAudioTrack was null, expected non-null bool.');
          try {
            api.onAddAudioTrack(arg_id, arg_uid!, arg_label, arg_language, arg_kind, arg_isEnabled!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterAudioTracksAPI.onAudioTrackAddQuality', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterAudioTracksAPI.onAudioTrackAddQuality was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_audioTrackUid = (args[0] as int?);
          assert(arg_audioTrackUid != null,
              'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterAudioTracksAPI.onAudioTrackAddQuality was null, expected non-null int.');
          final String? arg_qualityId = (args[1] as String?);
          assert(arg_qualityId != null,
              'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterAudioTracksAPI.onAudioTrackAddQuality was null, expected non-null String.');
          final int? arg_qualityUid = (args[2] as int?);
          assert(arg_qualityUid != null,
              'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterAudioTracksAPI.onAudioTrackAddQuality was null, expected non-null int.');
          final String? arg_name = (args[3] as String?);
          final int? arg_bandwidth = (args[4] as int?);
          assert(arg_bandwidth != null,
              'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterAudioTracksAPI.onAudioTrackAddQuality was null, expected non-null int.');
          final String? arg_codecs = (args[5] as String?);
          final int? arg_audioSamplingRate = (args[6] as int?);
          assert(arg_audioSamplingRate != null,
              'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterAudioTracksAPI.onAudioTrackAddQuality was null, expected non-null int.');
          try {
            api.onAudioTrackAddQuality(arg_audioTrackUid!, arg_qualityId!, arg_qualityUid!, arg_name, arg_bandwidth!, arg_codecs, arg_audioSamplingRate!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterAudioTracksAPI.onRemoveAudioTrack', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterAudioTracksAPI.onRemoveAudioTrack was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_uid = (args[0] as int?);
          assert(arg_uid != null,
              'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterAudioTracksAPI.onRemoveAudioTrack was null, expected non-null int.');
          try {
            api.onRemoveAudioTrack(arg_uid!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterAudioTracksAPI.onAudioTrackListChange', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterAudioTracksAPI.onAudioTrackListChange was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_uid = (args[0] as int?);
          assert(arg_uid != null,
              'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterAudioTracksAPI.onAudioTrackListChange was null, expected non-null int.');
          try {
            api.onAudioTrackListChange(arg_uid!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterAudioTracksAPI.onTargetQualityChange', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterAudioTracksAPI.onTargetQualityChange was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_audioTrackUid = (args[0] as int?);
          assert(arg_audioTrackUid != null,
              'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterAudioTracksAPI.onTargetQualityChange was null, expected non-null int.');
          final List<int?>? arg_qualitiesUid = (args[1] as List<Object?>?)?.cast<int?>();
          assert(arg_qualitiesUid != null,
              'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterAudioTracksAPI.onTargetQualityChange was null, expected non-null List<int?>.');
          final int? arg_qualityUid = (args[2] as int?);
          try {
            api.onTargetQualityChange(arg_audioTrackUid!, arg_qualitiesUid!, arg_qualityUid);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterAudioTracksAPI.onActiveQualityChange', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterAudioTracksAPI.onActiveQualityChange was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_audioTrackUid = (args[0] as int?);
          assert(arg_audioTrackUid != null,
              'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterAudioTracksAPI.onActiveQualityChange was null, expected non-null int.');
          final int? arg_qualityUid = (args[1] as int?);
          assert(arg_qualityUid != null,
              'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterAudioTracksAPI.onActiveQualityChange was null, expected non-null int.');
          try {
            api.onActiveQualityChange(arg_audioTrackUid!, arg_qualityUid!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterAudioTracksAPI.onQualityUpdate', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterAudioTracksAPI.onQualityUpdate was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_audioTrackUid = (args[0] as int?);
          assert(arg_audioTrackUid != null,
              'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterAudioTracksAPI.onQualityUpdate was null, expected non-null int.');
          final int? arg_qualityUid = (args[1] as int?);
          assert(arg_qualityUid != null,
              'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterAudioTracksAPI.onQualityUpdate was null, expected non-null int.');
          final String? arg_name = (args[2] as String?);
          final int? arg_bandwidth = (args[3] as int?);
          assert(arg_bandwidth != null,
              'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterAudioTracksAPI.onQualityUpdate was null, expected non-null int.');
          final String? arg_codecs = (args[4] as String?);
          final int? arg_audioSamplingRate = (args[5] as int?);
          assert(arg_audioSamplingRate != null,
              'Argument for dev.flutter.pigeon.theoplayer_platform_interface.THEOplayerFlutterAudioTracksAPI.onQualityUpdate was null, expected non-null int.');
          try {
            api.onQualityUpdate(arg_audioTrackUid!, arg_qualityUid!, arg_name, arg_bandwidth!, arg_codecs, arg_audioSamplingRate!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }
}
